import eg

eg.RegisterPlugin(
    name = "SpeakEasy",
    author = "MaikHorma",
    version = "0.0.1",
    kind = "other",
    description = "Uses built in speech recognition of windows 7 to convert words to events.",
    icon = ""
)

import speech
import time
from threading import Event, Thread
import wx

DEFAULT_WORDS = 'sphinx,start,notepad,command,system,close,help,lock,shutdown,reboot,cancel'

class SpeakEasy(eg.PluginBase):
    counter = 0
    
    def __init__(self):
        self.AddEvents()

    def __start__(self,words):
        self.wordList = words.split(',')
        def followUp(plugin):
            print "sleepy"
            Event().wait(4)
            plugin.counter -= 1
            print "counter %d" % plugin.counter
            if plugin.counter <= 0:
                plugin.TriggerEvent("DIE")
                plugin.counter = 0
        
        def callback(phrase, listener):
            self.counter += 1
            self.TriggerEvent("ANY")
            self.TriggerEvent(phrase)
            Thread(target=followUp, args=(self,)).start()
            
        speech.listenfor(self.wordList,callback)
        
    def __stop__(self):
        speech.stoplistening()
        
    def Configure(self,words=DEFAULT_WORDS):
        panel = eg.ConfigPanel()
        labelField = wx.StaticText(panel,-1,'Known words:')
        textCtrl = wx.TextCtrl(panel,-1,words)
        topSizer = wx.FlexGridSizer(2,0,2,15)
        topSizer.AddGrowableCol(0,1)
        topSizer.AddGrowableCol(1,1) 
        topSizer.Add(labelField,0,wx.EXPAND)
        topSizer.Add(textCtrl,0,wx.EXPAND)    
        panel.sizer.Add(topSizer,0,wx.EXPAND)
        while panel.Affirmed():
            panel.SetResult(textCtrl.GetValue())
